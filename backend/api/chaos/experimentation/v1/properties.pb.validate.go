// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaos/experimentation/v1/properties.proto

package experimentationv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PropertiesList with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// PropertiesListMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *PropertiesList) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = PropertiesListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return PropertiesListMultiError(errors)
	}
	return nil
}

// PropertiesListMultiError is an error wrapping multiple validation errors
// returned by PropertiesList.Validate(true) if the designated constraints
// aren't met.
type PropertiesListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertiesListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertiesListMultiError) AllErrors() []error { return m }

// PropertiesListValidationError is the validation error returned by
// PropertiesList.Validate if the designated constraints aren't met.
type PropertiesListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertiesListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertiesListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertiesListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertiesListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertiesListValidationError) ErrorName() string { return "PropertiesListValidationError" }

// Error satisfies the builtin error interface
func (e PropertiesListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertiesList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertiesListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertiesListValidationError{}

// Validate checks the field values on PropertiesMap with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// PropertiesMapMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *PropertiesMap) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for key, val := range m.GetItems() {
		_ = val

		// no validation rules for Items[key]

		if v, ok := interface{}(val).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = PropertiesMapValidationError{
					field:  fmt.Sprintf("Items[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return PropertiesMapMultiError(errors)
	}
	return nil
}

// PropertiesMapMultiError is an error wrapping multiple validation errors
// returned by PropertiesMap.Validate(true) if the designated constraints
// aren't met.
type PropertiesMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertiesMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertiesMapMultiError) AllErrors() []error { return m }

// PropertiesMapValidationError is the validation error returned by
// PropertiesMap.Validate if the designated constraints aren't met.
type PropertiesMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertiesMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertiesMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertiesMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertiesMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertiesMapValidationError) ErrorName() string { return "PropertiesMapValidationError" }

// Error satisfies the builtin error interface
func (e PropertiesMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertiesMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertiesMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertiesMapValidationError{}

// Validate checks the field values on Property with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// PropertyMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *Property) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Label

	if v, ok := interface{}(m.GetDisplayValue()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = PropertyValidationError{
				field:  "DisplayValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	switch m.Value.(type) {

	case *Property_DateValue:

		if v, ok := interface{}(m.GetDateValue()).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = PropertyValidationError{
					field:  "DateValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	case *Property_StringValue:
		// no validation rules for StringValue

	case *Property_IntValue:
		// no validation rules for IntValue

	case *Property_UrlValue:
		// no validation rules for UrlValue

	}

	if len(errors) > 0 {
		return PropertyMultiError(errors)
	}
	return nil
}

// PropertyMultiError is an error wrapping multiple validation errors returned
// by Property.Validate(true) if the designated constraints aren't met.
type PropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyMultiError) AllErrors() []error { return m }

// PropertyValidationError is the validation error returned by
// Property.Validate if the designated constraints aren't met.
type PropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyValidationError) ErrorName() string { return "PropertyValidationError" }

// Error satisfies the builtin error interface
func (e PropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyValidationError{}
