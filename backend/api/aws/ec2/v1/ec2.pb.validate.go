// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aws/ec2/v1/ec2.proto

package ec2v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on AutoscalingGroupSize with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in AutoscalingGroupSizeMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *AutoscalingGroupSize) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Min

	// no validation rules for Max

	// no validation rules for Desired

	if len(errors) > 0 {
		return AutoscalingGroupSizeMultiError(errors)
	}
	return nil
}

// AutoscalingGroupSizeMultiError is an error wrapping multiple validation
// errors returned by AutoscalingGroupSize.Validate(true) if the designated
// constraints aren't met.
type AutoscalingGroupSizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoscalingGroupSizeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoscalingGroupSizeMultiError) AllErrors() []error { return m }

// AutoscalingGroupSizeValidationError is the validation error returned by
// AutoscalingGroupSize.Validate if the designated constraints aren't met.
type AutoscalingGroupSizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoscalingGroupSizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoscalingGroupSizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoscalingGroupSizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoscalingGroupSizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoscalingGroupSizeValidationError) ErrorName() string {
	return "AutoscalingGroupSizeValidationError"
}

// Error satisfies the builtin error interface
func (e AutoscalingGroupSizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoscalingGroupSize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoscalingGroupSizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoscalingGroupSizeValidationError{}

// Validate checks the field values on ResizeAutoscalingGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ResizeAutoscalingGroupRequestMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *ResizeAutoscalingGroupRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) < 1 {
		err := ResizeAutoscalingGroupRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRegion()) < 1 {
		err := ResizeAutoscalingGroupRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSize() == nil {
		err := ResizeAutoscalingGroupRequestValidationError{
			field:  "Size",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if v, ok := interface{}(m.GetSize()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ResizeAutoscalingGroupRequestValidationError{
				field:  "Size",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return ResizeAutoscalingGroupRequestMultiError(errors)
	}
	return nil
}

// ResizeAutoscalingGroupRequestMultiError is an error wrapping multiple
// validation errors returned by ResizeAutoscalingGroupRequest.Validate(true)
// if the designated constraints aren't met.
type ResizeAutoscalingGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResizeAutoscalingGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResizeAutoscalingGroupRequestMultiError) AllErrors() []error { return m }

// ResizeAutoscalingGroupRequestValidationError is the validation error
// returned by ResizeAutoscalingGroupRequest.Validate if the designated
// constraints aren't met.
type ResizeAutoscalingGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResizeAutoscalingGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResizeAutoscalingGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResizeAutoscalingGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResizeAutoscalingGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResizeAutoscalingGroupRequestValidationError) ErrorName() string {
	return "ResizeAutoscalingGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResizeAutoscalingGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResizeAutoscalingGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResizeAutoscalingGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResizeAutoscalingGroupRequestValidationError{}

// Validate checks the field values on ResizeAutoscalingGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ResizeAutoscalingGroupResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *ResizeAutoscalingGroupResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResizeAutoscalingGroupResponseMultiError(errors)
	}
	return nil
}

// ResizeAutoscalingGroupResponseMultiError is an error wrapping multiple
// validation errors returned by ResizeAutoscalingGroupResponse.Validate(true)
// if the designated constraints aren't met.
type ResizeAutoscalingGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResizeAutoscalingGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResizeAutoscalingGroupResponseMultiError) AllErrors() []error { return m }

// ResizeAutoscalingGroupResponseValidationError is the validation error
// returned by ResizeAutoscalingGroupResponse.Validate if the designated
// constraints aren't met.
type ResizeAutoscalingGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResizeAutoscalingGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResizeAutoscalingGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResizeAutoscalingGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResizeAutoscalingGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResizeAutoscalingGroupResponseValidationError) ErrorName() string {
	return "ResizeAutoscalingGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResizeAutoscalingGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResizeAutoscalingGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResizeAutoscalingGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResizeAutoscalingGroupResponseValidationError{}

// Validate checks the field values on AutoscalingGroup with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in AutoscalingGroupMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *AutoscalingGroup) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Region

	if v, ok := interface{}(m.GetSize()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = AutoscalingGroupValidationError{
				field:  "Size",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = AutoscalingGroupValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return AutoscalingGroupMultiError(errors)
	}
	return nil
}

// AutoscalingGroupMultiError is an error wrapping multiple validation errors
// returned by AutoscalingGroup.Validate(true) if the designated constraints
// aren't met.
type AutoscalingGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoscalingGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoscalingGroupMultiError) AllErrors() []error { return m }

// AutoscalingGroupValidationError is the validation error returned by
// AutoscalingGroup.Validate if the designated constraints aren't met.
type AutoscalingGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoscalingGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoscalingGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoscalingGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoscalingGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoscalingGroupValidationError) ErrorName() string { return "AutoscalingGroupValidationError" }

// Error satisfies the builtin error interface
func (e AutoscalingGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoscalingGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoscalingGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoscalingGroupValidationError{}

// Validate checks the field values on GetInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetInstanceRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetInstanceRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetInstanceId()) < 1 {
		err := GetInstanceRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRegion()) < 1 {
		err := GetInstanceRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetInstanceRequestMultiError(errors)
	}
	return nil
}

// GetInstanceRequestMultiError is an error wrapping multiple validation errors
// returned by GetInstanceRequest.Validate(true) if the designated constraints
// aren't met.
type GetInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstanceRequestMultiError) AllErrors() []error { return m }

// GetInstanceRequestValidationError is the validation error returned by
// GetInstanceRequest.Validate if the designated constraints aren't met.
type GetInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstanceRequestValidationError) ErrorName() string {
	return "GetInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstanceRequestValidationError{}

// Validate checks the field values on GetInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetInstanceResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetInstanceResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetInstance()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = GetInstanceResponseValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return GetInstanceResponseMultiError(errors)
	}
	return nil
}

// GetInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by GetInstanceResponse.Validate(true) if the designated
// constraints aren't met.
type GetInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstanceResponseMultiError) AllErrors() []error { return m }

// GetInstanceResponseValidationError is the validation error returned by
// GetInstanceResponse.Validate if the designated constraints aren't met.
type GetInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstanceResponseValidationError) ErrorName() string {
	return "GetInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstanceResponseValidationError{}

// Validate checks the field values on TerminateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in TerminateInstanceRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *TerminateInstanceRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetInstanceId()) < 1 {
		err := TerminateInstanceRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRegion()) < 1 {
		err := TerminateInstanceRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TerminateInstanceRequestMultiError(errors)
	}
	return nil
}

// TerminateInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by TerminateInstanceRequest.Validate(true) if the
// designated constraints aren't met.
type TerminateInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerminateInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerminateInstanceRequestMultiError) AllErrors() []error { return m }

// TerminateInstanceRequestValidationError is the validation error returned by
// TerminateInstanceRequest.Validate if the designated constraints aren't met.
type TerminateInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerminateInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerminateInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerminateInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerminateInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerminateInstanceRequestValidationError) ErrorName() string {
	return "TerminateInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TerminateInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerminateInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerminateInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerminateInstanceRequestValidationError{}

// Validate checks the field values on TerminateInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in TerminateInstanceResponseMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *TerminateInstanceResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TerminateInstanceResponseMultiError(errors)
	}
	return nil
}

// TerminateInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by TerminateInstanceResponse.Validate(true) if the
// designated constraints aren't met.
type TerminateInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerminateInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerminateInstanceResponseMultiError) AllErrors() []error { return m }

// TerminateInstanceResponseValidationError is the validation error returned by
// TerminateInstanceResponse.Validate if the designated constraints aren't met.
type TerminateInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerminateInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerminateInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerminateInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerminateInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerminateInstanceResponseValidationError) ErrorName() string {
	return "TerminateInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TerminateInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerminateInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerminateInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerminateInstanceResponseValidationError{}

// Validate checks the field values on RebootInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in RebootInstanceRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *RebootInstanceRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetInstanceId()) < 1 {
		err := RebootInstanceRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRegion()) < 1 {
		err := RebootInstanceRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RebootInstanceRequestMultiError(errors)
	}
	return nil
}

// RebootInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by RebootInstanceRequest.Validate(true) if the designated
// constraints aren't met.
type RebootInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootInstanceRequestMultiError) AllErrors() []error { return m }

// RebootInstanceRequestValidationError is the validation error returned by
// RebootInstanceRequest.Validate if the designated constraints aren't met.
type RebootInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootInstanceRequestValidationError) ErrorName() string {
	return "RebootInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RebootInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRebootInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootInstanceRequestValidationError{}

// Validate checks the field values on RebootInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in RebootInstanceResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *RebootInstanceResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RebootInstanceResponseMultiError(errors)
	}
	return nil
}

// RebootInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by RebootInstanceResponse.Validate(true) if the designated
// constraints aren't met.
type RebootInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootInstanceResponseMultiError) AllErrors() []error { return m }

// RebootInstanceResponseValidationError is the validation error returned by
// RebootInstanceResponse.Validate if the designated constraints aren't met.
type RebootInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootInstanceResponseValidationError) ErrorName() string {
	return "RebootInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RebootInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRebootInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootInstanceResponseValidationError{}

// Validate checks the field values on Instance with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// InstanceMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *Instance) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Region

	// no validation rules for State

	// no validation rules for InstanceType

	// no validation rules for PublicIpAddress

	// no validation rules for PrivateIpAddress

	// no validation rules for AvailabilityZone

	// no validation rules for Tags

	if len(errors) > 0 {
		return InstanceMultiError(errors)
	}
	return nil
}

// InstanceMultiError is an error wrapping multiple validation errors returned
// by Instance.Validate(true) if the designated constraints aren't met.
type InstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMultiError) AllErrors() []error { return m }

// InstanceValidationError is the validation error returned by
// Instance.Validate if the designated constraints aren't met.
type InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceValidationError) ErrorName() string { return "InstanceValidationError" }

// Error satisfies the builtin error interface
func (e InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceValidationError{}

// Validate checks the field values on AutoscalingGroup_Instance with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in AutoscalingGroup_InstanceMultiError, or nil if none
// found. Otherwise, only the first error is returned, if any.
func (m *AutoscalingGroup_Instance) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Zone

	// no validation rules for LaunchConfigurationName

	// no validation rules for Healthy

	// no validation rules for LifecycleState

	if len(errors) > 0 {
		return AutoscalingGroup_InstanceMultiError(errors)
	}
	return nil
}

// AutoscalingGroup_InstanceMultiError is an error wrapping multiple validation
// errors returned by AutoscalingGroup_Instance.Validate(true) if the
// designated constraints aren't met.
type AutoscalingGroup_InstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoscalingGroup_InstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoscalingGroup_InstanceMultiError) AllErrors() []error { return m }

// AutoscalingGroup_InstanceValidationError is the validation error returned by
// AutoscalingGroup_Instance.Validate if the designated constraints aren't met.
type AutoscalingGroup_InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoscalingGroup_InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoscalingGroup_InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoscalingGroup_InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoscalingGroup_InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoscalingGroup_InstanceValidationError) ErrorName() string {
	return "AutoscalingGroup_InstanceValidationError"
}

// Error satisfies the builtin error interface
func (e AutoscalingGroup_InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoscalingGroup_Instance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoscalingGroup_InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoscalingGroup_InstanceValidationError{}
